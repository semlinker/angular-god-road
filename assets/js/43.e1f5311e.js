(window.webpackJsonp=window.webpackJsonp||[]).push([[43],{177:function(t,e,s){"use strict";s.r(e);var n=s(0),a=Object(n.a)({},function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("div",{staticClass:"content"},[s("p",[t._v("目前很多的项目都已经使用 Git 作为版本控制工具，使用 Git 意味着我们每天都要与 Git Commit Message 打交道。Git Commit Message 看似简单，但实际却很重要。通过 Git Commit Message 我们可以快速地了解本次提交的信息，比如解决了哪个 Bug、优化了什么问题或新增了什么功能等。")]),t._v(" "),s("p",[t._v("俗话说得好，无规矩不成方圆。因为 Git Commit Message 很重要，所以为了能够更好地进行项目开发与维护，我们就需要规范化 Git Commit Message，除此之外，规范化 Git Commit Message 还有以下的好处，比如：")]),t._v(" "),t._m(0),t._v(" "),s("p",[t._v("那么应该如何规范化 Git Commit Message，这里我们可以使用开源社区为我们总结出了一套名为 "),s("a",{attrs:{href:"https://conventionalcommits.org/spec/v1.0.0-beta.2.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("Conventional Commits"),s("OutboundLink")],1),t._v(" 的书写规范，该规范受到了 "),s("a",{attrs:{href:"https://github.com/angular/angular.js/blob/master/CONTRIBUTING.md#commit",target:"_blank",rel:"noopener noreferrer"}},[t._v("Angular Commit Guidelines"),s("OutboundLink")],1),t._v(" 的启发，并在很大程度上以其为依据。它规定的格式如下：")]),t._v(" "),t._m(1),s("p",[t._v("type 用于表示此次改动的类型，目前常用的主要有以下几种：")]),t._v(" "),s("ul",[s("li",[s("p",[t._v("feat 新功能（feature）表示在代码库中新增了一个功能（这和语义化版本中的 "),s("a",{attrs:{href:"http://semver.org/#summary",target:"_blank",rel:"noopener noreferrer"}},[s("code",[t._v("MINOR")]),s("OutboundLink")],1),t._v(" 相对应）")])]),t._v(" "),s("li",[s("p",[t._v("fix 表示在代码库中修复了一个 bug（这和语义化版本中的 "),s("a",{attrs:{href:"http://semver.org/#summary",target:"_blank",rel:"noopener noreferrer"}},[s("code",[t._v("PATCH")]),s("OutboundLink")],1),t._v(" 相对应）")])]),t._v(" "),t._m(2),t._v(" "),t._m(3),t._v(" "),t._m(4),t._v(" "),t._m(5),t._v(" "),t._m(6),t._v(" "),t._m(7)]),t._v(" "),s("p",[t._v("scope：一个可选的修改范围，用于标识此次提交主要涉及到代码中哪个模块。")]),t._v(" "),t._m(8),t._v(" "),t._m(9),t._v(" "),s("p",[t._v("optional footer：描述与之关联的 issue 或 break change。")]),t._v(" "),t._m(10),t._v(" "),t._m(11),t._v(" "),t._m(12),t._m(13),t._v(" "),t._m(14),t._m(15),t._v(" "),t._m(16),t._m(17),t._v(" "),t._m(18),s("p",[t._v("现在 Git Commit Message 规范已经找到了，但仅仅靠规范还是不能保证项目中的每个成员都遵循规范。这时我们还需要一个工具，能够智能地检测我们的 commit message 是否符合规范的要求。值得庆幸的是，现在已经有现成的工具了，它就是 "),s("a",{attrs:{href:"http://marionebl.github.io/commitlint/",target:"_blank",rel:"noopener noreferrer"}},[t._v("commitlint"),s("OutboundLink")],1),t._v("，接下来我们来介绍在项目中如何使用  "),s("a",{attrs:{href:"http://marionebl.github.io/commitlint/",target:"_blank",rel:"noopener noreferrer"}},[t._v("commitlint"),s("OutboundLink")],1),t._v("。")]),t._v(" "),t._m(19),t._v(" "),s("p",[t._v("首先我们要先安装 commitlint 以及 conventional 规范：")]),t._v(" "),t._m(20),s("p",[t._v("接着在命令行输入以下命令：")]),t._v(" "),t._m(21),s("p",[t._v("运行以上命令后项目会生成 commitlint.config.js。当然我们也可以手动创建 commitlint.config.js 文件，然后在文件内输入以下内容：")]),t._v(" "),t._m(22),s("p",[t._v("现在我们已经完成了 commitlint 的配置，但我们还需要在每次提交时，自动触发 commitlint 进行规范检查。要实现这个功能，我们可以借助另一个工具 "),s("a",{attrs:{href:"https://github.com/typicode/husky",target:"_blank",rel:"noopener noreferrer"}},[t._v("husky"),s("OutboundLink")],1),t._v("。")]),t._v(" "),t._m(23),t._v(" "),s("p",[t._v("husky 是一个增强的 git hooks 工具，它让我们可以在 git hook 的各个阶段运行 package.json 中设定的任务。")]),t._v(" "),s("p",[t._v("下面我们继续来安装 husky：")]),t._v(" "),t._m(24),s("p",[t._v("安装完成后，我们需要在 package.json 文件中添加以下的配置项：")]),t._v(" "),t._m(25),s("p",[t._v("完成上述的配置后，我们可以验证一下 commitlint 是否生效：")]),t._v(" "),t._m(26),t._v(" "),t._m(27),s("p",[t._v("以上命令运行后，会输出以下信息：")]),t._v(" "),t._m(28),t._m(29),t._v(" "),t._m(30),s("p",[t._v("以上命令运行后，会输出以下信息：")]),t._v(" "),t._m(31),s("p",[t._v("如果我们项目的 Git Commit Message 严格遵守 conventional 规范，那么在发布版本时，我们就可以自动生成 CHANGELOG，这里我们可以使用的是 "),s("a",{attrs:{href:"https://github.com/conventional-changelog/standard-version",target:"_blank",rel:"noopener noreferrer"}},[t._v("standard-version"),s("OutboundLink")],1),t._v(" 这款工具。")]),t._v(" "),t._m(32),t._v(" "),s("p",[t._v("顾名思义，"),s("a",{attrs:{href:"https://github.com/conventional-changelog/standard-version",target:"_blank",rel:"noopener noreferrer"}},[t._v("standard-version"),s("OutboundLink")],1),t._v(" 用于替代 "),s("code",[t._v("npm version")]),t._v("，同时还能自动生成 CHANGELOG。最后，我们来简单介绍一下 "),s("a",{attrs:{href:"https://github.com/conventional-changelog/standard-version",target:"_blank",rel:"noopener noreferrer"}},[t._v("standard-version"),s("OutboundLink")],1),t._v(" 这款工具。")]),t._v(" "),t._m(33),t._v(" "),s("p",[t._v("在介绍  "),s("a",{attrs:{href:"https://github.com/conventional-changelog/standard-version",target:"_blank",rel:"noopener noreferrer"}},[t._v("standard-version"),s("OutboundLink")],1),t._v(" 之前，我们先来简单了解一下 Semver（Semantic Versioning） 规范，该规范规定了版本号如何表示，如何增加，如何进行比较，不同的版本号意味着什么。")]),t._v(" "),s("p",[t._v("版本格式：主版本号.次版本号.修订号，版本号递增规则如下：")]),t._v(" "),t._m(34),t._v(" "),s("p",[t._v("**先行版本号及版本编译信息可以加到 “主版本号.次版本号.修订号” 的后面，作为延伸。**Semver 规范中使用alpha、beta、rc 来修饰即将要发布的版本。它们的含义是：")]),t._v(" "),t._m(35),t._v(" "),s("p",[t._v("在发布 npm 包时，为了让我们更好的遵从 Semver 规范，npm 为我们提供了 npm version 命令，具体使用方式如下：")]),t._v(" "),t._m(36),t._v(" "),s("p",[t._v("关于 Semver(语义化版本号) 的相关内容，这里我们不再详细展开。感兴趣的同学，可以阅读 "),s("a",{attrs:{href:"https://juejin.im/user/5a9f77666fb9a028c14a01eb",target:"_blank",rel:"noopener noreferrer"}},[t._v("腾讯IVWEB团队"),s("OutboundLink")],1),t._v(" 发布的 "),s("a",{attrs:{href:"https://juejin.im/post/5ad413ba6fb9a028b5485866",target:"_blank",rel:"noopener noreferrer"}},[t._v("Semver(语义化版本号)扫盲"),s("OutboundLink")],1),t._v(" 这篇文章。接下来我们开始介绍 standard-version 这款工具。")]),t._v(" "),s("p",[t._v("首先以 local 模式安装 "),s("a",{attrs:{href:"https://github.com/conventional-changelog/standard-version",target:"_blank",rel:"noopener noreferrer"}},[t._v("standard-version"),s("OutboundLink")],1),t._v("：")]),t._v(" "),t._m(37),s("p",[t._v("然后在 package.json 的 scripts 中添加以下配置：")]),t._v(" "),t._m(38),s("p",[t._v("若需要发布首个版本，则可以运行以下命令：")]),t._v(" "),t._m(39),t._m(40),t._v(" "),t._m(41),t._m(42),t._v(" "),t._m(43),t._m(44),t._v(" "),t._m(45),s("p",[t._v("为了方便地进行版本发布，我们也可以在 npm scripts 中定义对应的任务，比如：")]),t._v(" "),t._m(46),t._m(47),t._v(" "),s("ul",[s("li",[s("a",{attrs:{href:"https://conventionalcommits.org/spec/v1.0.0-beta.2.html#conventional-commits-100-beta2",target:"_blank",rel:"noopener noreferrer"}},[t._v("conventional-commits-100-beta2"),s("OutboundLink")],1)]),t._v(" "),s("li",[s("a",{attrs:{href:"https://juejin.im/post/5ad413ba6fb9a028b5485866",target:"_blank",rel:"noopener noreferrer"}},[t._v("Semver(语义化版本号)扫盲"),s("OutboundLink")],1)])])])},[function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("ul",[s("li",[t._v("自动化生成 CHANGELOG。")]),t._v(" "),s("li",[t._v("基于提交的类型，自动决定语义化的版本变更。")]),t._v(" "),s("li",[t._v("向同事、公众与其他利益关系人传达变化的性质。")]),t._v(" "),s("li",[t._v("触发构建和部署流程。")]),t._v(" "),s("li",[t._v("让人们更容易地探索结构化的提交历史，降低贡献项目的难度。")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v("<type>[optional scope]: <description>\n\n[optional body]\n\n[optional footer]\n")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("li",[e("p",[this._v("docs 文档（documentation）")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("li",[e("p",[this._v("style (格式化, 缺失分号等; 不包括生产代码变动)")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("li",[e("p",[this._v("refactor (重构代码)")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("li",[e("p",[this._v("perf (性能优化)")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("li",[e("p",[this._v("test (添加缺失的测试, 重构测试, 不包括生产代码变动)")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("li",[e("p",[this._v("chore (更新grunt任务等; 不包括生产代码变动)")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("description：简明扼要描述本次提交的内容，首字母无需大写，结尾不需要使用 "),e("code",[this._v(".")]),this._v("。")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("optional body：详细描述本次提交，比如此次变更的动机，如需换行，则使用 "),e("code",[this._v("|")]),this._v("。")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"conventional-commits-示例"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#conventional-commits-示例","aria-hidden":"true"}},[this._v("#")]),this._v(" Conventional Commits 示例")])},function(){var t=this.$createElement,e=this._self._c||t;return e("ol",[e("li",[this._v("包含了描述与正文内破坏性变更的提交说明")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v("feat: allow provided config object to extend other configs\n\nBREAKING CHANGE: `extends` key in config file is now used for extending other config files\n")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("ol",[e("li",[this._v("不包含正文的提交说明")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v("docs: correct spelling of CHANGELOG\n")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("ol",[e("li",[this._v("包含作用域的提交说明")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v("feat(lang): added polish language\n")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("ol",[e("li",[this._v("为 fix 编写的提交说明，包含可选的 issue 编号")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v("fix: minor typos in code\n\nsee the issue for details on the typos fixed\n\nfixes issue #12\n")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"commitlint-项目实战"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#commitlint-项目实战","aria-hidden":"true"}},[this._v("#")]),this._v(" commitlint 项目实战")])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language-shell extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v("# Install commitlint cli and angular config\n$ npm install --save-dev @commitlint/{config-conventional,cli}\n# For Windows:\n$ npm install --save-dev @commitlint/config-conventional @commitlint/cli\n")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language-shell extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v("echo \"module.exports = {extends: ['@commitlint/config-conventional']}\" > commitlint.config.js\n")])])])},function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("div",{staticClass:"language-javascript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[t._v("module"),s("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("exports "),s("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{attrs:{class:"token keyword"}},[t._v("extends")]),s("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{attrs:{class:"token string"}},[t._v("'@commitlint/config-conventional'")]),s("span",{attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])},function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("blockquote",[s("p",[t._v("🐶 Git hooks made easy")]),t._v(" "),s("p",[t._v("Husky can prevent bad "),s("code",[t._v("git commit")]),t._v(", "),s("code",[t._v("git push")]),t._v(" and more 🐶 "),s("em",[t._v("woof!")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language-shell extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v("$ npm install --save-dev husky\n")])])])},function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("div",{staticClass:"language-json extra-class"},[s("pre",{pre:!0,attrs:{class:"language-json"}},[s("code",[s("span",{attrs:{class:"token property"}},[t._v('"husky"')]),s("span",{attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{attrs:{class:"token property"}},[t._v('"hooks"')]),s("span",{attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      "),s("span",{attrs:{class:"token property"}},[t._v('"commit-msg"')]),s("span",{attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{attrs:{class:"token string"}},[t._v('"commitlint -E HUSKY_GIT_PARAMS"')]),t._v("\n    "),s("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("ol",[e("li",[this._v("不符合规范的 commit message")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v('$ git commit -m "foo: this will fail"\n')])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v("husky > commit-msg (node v9.11.0)\n⧗   input:\nfoo: this will fail\n\n✖   type must be one of [build, chore, ci, docs, feat, fix, perf, refactor, revert, style, test] [type-enum]\n✖   found 1 problems, 0 warnings\nhusky > commit-msg hook failed (add --no-verify to bypass)\n")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("ol",[e("li",[this._v("符合规范的 commit message")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language-shell extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v('$ git commit -m "chore: lint on commitmsg"\n')])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v("usky > commit-msg (node v9.11.0)\n⧗   input: chore: lint on commitmsg\n✔   found 0 problems, 0 warnings\n\n[master 394dce6] chore: lint on commitmsg\n")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("blockquote",[e("p",[this._v("🏆 Replacement for "),e("code",[this._v("npm version")]),this._v(" with automatic CHANGELOG generation")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"standard-version-简介"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#standard-version-简介","aria-hidden":"true"}},[this._v("#")]),this._v(" standard-version 简介")])},function(){var t=this.$createElement,e=this._self._c||t;return e("ul",[e("li",[this._v("主版本号（major）：当你做了不兼容的 API 修改。")]),this._v(" "),e("li",[this._v("次版本号（minor）：当你做了向下兼容的功能性新增，可以理解为 Feature 版本。")]),this._v(" "),e("li",[this._v("修订号（patch）：当你做了向下兼容的问题修正，可以理解为 Bug fix 版本。")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("ul",[e("li",[this._v("alpha：内部版本。")]),this._v(" "),e("li",[this._v("beta：公测版本。")]),this._v(" "),e("li",[this._v("rc：即 Release Candiate，正式版本的候选版本。")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("ul",[e("li",[this._v("升级补丁版本号：npm version patch。")]),this._v(" "),e("li",[this._v("升级小版本号：npm version minor。")]),this._v(" "),e("li",[this._v("升级大版本号：npm version major。")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language-shell extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v("$ npm install --save-dev standard-version\n")])])])},function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("div",{staticClass:"language-json extra-class"},[s("pre",{pre:!0,attrs:{class:"language-json"}},[s("code",[s("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{attrs:{class:"token property"}},[t._v('"scripts"')]),s("span",{attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{attrs:{class:"token property"}},[t._v('"release"')]),s("span",{attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{attrs:{class:"token string"}},[t._v('"standard-version"')]),t._v("\n  "),s("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language-shell extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v("$ npm run release -- --first-release\n")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("如果需要发布预发布版本，则可以使用 "),e("code",[this._v("--prerelease")]),this._v(" 标志，比如：")])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language-shell extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v("$ npm run release -- --prerelease\n")])])])},function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("p",[t._v("假设你当前最新的版本是 "),s("code",[t._v("v1.0.0")]),t._v("，在运行上述命令后，你的版本将变为 "),s("code",[t._v("v1.0.1-0")]),t._v("。此外，如果你的预发布版本要包含 "),s("code",[t._v("alpha")]),t._v(" 前缀，你可以通过 "),s("code",[t._v("--prerelease <name>")]),t._v(" 设定前缀：")])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language-shell extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v("$ npm run release -- --prerelease alpha\n")])])])},function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("p",[t._v("此时，当前版本将变为 "),s("code",[t._v("1.0.1-alpha.0")]),t._v("。除了 "),s("code",[t._v("--first-release")]),t._v(" 和 "),s("code",[t._v("--prerelease")]),t._v(" 标识外，standard-version 还支持一个很有用的标志 "),s("code",[t._v("--release-as")]),t._v("，它支持三种不同的参数： "),s("code",[t._v("major")]),t._v(", "),s("code",[t._v("minor")]),t._v(" 或 "),s("code",[t._v("patch")]),t._v("，使用方式如下：")])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language-shell extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v("$ npm run release -- --release-as minor\n")])])])},function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("div",{staticClass:"language-json extra-class"},[s("pre",{pre:!0,attrs:{class:"language-json"}},[s("code",[s("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{attrs:{class:"token property"}},[t._v('"release:minor"')]),s("span",{attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{attrs:{class:"token string"}},[t._v('"standard-version --release-as minor && git push --follow-tags origin master"')]),s("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),s("span",{attrs:{class:"token property"}},[t._v('"release:major"')]),s("span",{attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{attrs:{class:"token string"}},[t._v('"standard-version --release-as major && git push --follow-tags origin master"')]),t._v("\n"),s("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"参考资源"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#参考资源","aria-hidden":"true"}},[this._v("#")]),this._v(" 参考资源")])}],!1,null,null,null);a.options.__file="ng-verson-manage.md";e.default=a.exports}}]);